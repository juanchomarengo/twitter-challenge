// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String
  privateProfile  Boolean @default(false) // Default value

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  messages Message[] // One to many
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")
  interactions PostInteractions[] // One to many
  conversationUserOne Converations[] @relation(name: "conversationUserOne")
  conversationUserTwo Converations[] @relation(name: "conversationUserTwo")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@unique([followerId, followedId])

}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]
  qtyLikes Int @default(0)
  qtyComments Int @default(0)
  qtyRetweets Int @default(0)
  parentId String? @db.Uuid // Foreign Key

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  interactions PostInteractions[] // One to many
}

enum PostInteractionType {
  LIKE
  COMMENT
  RETWEET
}
model PostInteractions {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId String @db.Uuid // Foreign Key
  postId String @db.Uuid // Foreign Key
  
  actionType PostInteractionType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // One to many
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // One to many

  @@unique([userId, postId, actionType])
}

model Converations {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userOneId String @db.Uuid // Foreign Key
  userTwoId String @db.Uuid // Foreign Key

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userOne User @relation(name: "conversationUserOne", fields: [userOneId], references: [id], onDelete: Cascade) // One to many
  userTwo User @relation(name: "conversationUserTwo", fields: [userTwoId], references: [id], onDelete: Cascade) // One to many

  messages Message[] // One to many

  @@unique([userOneId, userTwoId])
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  conversationId String @db.Uuid // Foreign Key
  senderId String @db.Uuid // Foreign Key
  content String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  conversation Converations @relation(fields: [conversationId], references: [id], onDelete: Cascade) // One to many
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade) // One to many
}